services:
  # Frontend
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        SERVER_URL: http://api:8080
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "5001:8080"
    environment:
      - FLASK_APP=app
      - FLASK_DEBUG=1
      - DATABASE_URL=${DATABASE_URL}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OAUTHLIB_INSECURE_TRANSPORT=1
      - GOOGLE_DISCOVERY_URL=http://oauth:9000/.well-known/openid-configuration
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    # depends_on:
    #   - db
    restart: unless-stopped
  texify:
    build:
      context: ./texify
      dockerfile: Dockerfile
    privileged: true
    ports:
      - 9090:8080
    environment:
      - GCS_BUCKET_NAME=prolio
      - GCS_EMULATOR_HOST=http://gcs:4443
      - GCS_EMULATOR=1
    depends_on:
      - redis
    restart: unless-stopped
  oauth:
    build:
      context: ./oauth
      dockerfile: Dockerfile
    ports:
      - 9000:9000
    environment:
      - AUTHORIZATION_URL=http://127.0.0.1:9000/auth
      - TOKEN_ENDPOINT=http://oauth:9000/token
      - USERINFO_ENDPOINT=http://oauth:9000/userinfo
    restart: unless-stopped
  gcs:
    image: fsouza/fake-gcs-server
    command: -scheme http -external-url http://gcs:4443
    ports:
      - "4443:4443"
    restart: unless-stopped
  # db:
  #   image: postgres:latest
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #   restart: unless-stopped
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
